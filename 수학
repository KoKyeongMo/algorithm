#1010
#내가 쓴 풀이(틀림)

t = int(input())

for _ in range(t):
    n,m = map(int,input().split())
    count = 0
    sum=0
    sum_list = []
    for i in range(n):
        for j in range(1,m-n+1):
            sum+=j
    sum_list.append(sum)
    
    for k in range(sum_list):
        if sum_list[k] <=m:
            count+=1

#해답

import math

def comb(n, k):
    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))             #m개의 위치중 n개를 선택하는 경우의수와 같고 이는 조합 C(m,n) = m!/n!*(m-n)!을 구하는것과 같다

T = int(input().strip())
for _ in range(T):
    N, M = map(int, input().split())
    print(comb(M, N))

#단순히 조합론에 대한 공부가 아직 되지않아 풀수없었던 문제


#1978
#내가 쓴 풀이

n = int(input())
count = 0
num_list = list(map(int,input().split()))

for i in num_list:
    while i%2 !=0:
        for j in range(3,i):
            if i%j ==0:
                break
        else:
            count+=1
                
print(count)

#해답

import math

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):                   #숫자 n이 소수인지는 n을 2부터 루트n에 이르기까지의 숫자들로 나눠보고 한번도 나머지가 0이되지 않으면 소수 판정을 받음
        if num % i == 0:
            return False
    return True                                                      #return 은 바로 그 값을 반환하고 함수는 그즉시 종료된다

N = int(input())
numbers = list(map(int, input().split()))

prime_count = 0
for number in numbers:
    if is_prime(number):
        prime_count += 1

print(prime_count)



#1065
#내가 쓴 풀이(맞음)

n = int(input())
count = n
for num in range(1,n+1):
    num_list = list(map(int,str(num)))
    if len(num_list)-2>0:
        for i in range(0,len(num_list)-2):
            if num_list[i]-num_list[i+1] != num_list[i+1]-num_list[i+2]:
                count-=1
                break
            
print(count)

#주의할점: list 이름을 list라고 하지 말기(오류가 발생할수 있음)



#11047
#내가 쓴 풀이(틀림)

n,k = map(int,input().split())

value_list = []

for _ in range(n):
    value_list.append(int(input()))
    
count = 0
last = k
for i in range(n-1,0,-1):
    if value_list[i]>last:
        continue
    if last>0:
        count += last//value_list[i]
        last = k%value_list[i]
    else:
        break
    
print(count)


#해답

n,k = map(int,input().split())

value_list = []

for _ in range(n):
    value_list.append(int(input()))
    
count = 0
last = k
for i in range(n-1,-1,-1):
    if value_list[i]>last:
        continue
    if last>0:
        count += last//value_list[i]
        last = last%value_list[i]
    else:
        break
    
print(count)


#주의할점: for문을 역순으로 진행할경우 i가 0까지 가게 하려면 range안에 가운데 수를 -1로 써야함 주의
        : last 와 k 를 서로 헷갈리지 않도록 주의하기(for i 문 안에 변하게되는 값은 k가아니라 last뿐임)


1929번 소수구하기

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;

int a[1000001], m, n;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> m >> n;
    a[1] = 0;
    for (int i = 2; i <= n; i++) {
        a[i] = 1;
    }
    for (int i = 2; i*i <= n; i++) {
        if(a[i]){
            for (int j = i * i; j <= n; j += i) {
                a[j] = 0;
            }
        }
    }
    for (int i = m; i <= n; i++) {
        if (a[i] == 1) {
            cout << i << '\n';
        }
    }
}

새롭게 알게된 점:
1. a[1] = 0;
    for (int i = 2; i <= n; i++) {
        a[i] = 1;
    }
    for (int i = 2; i*i <= n; i++) {
        if(a[i]){
            for (int j = i * i; j <= n; j += i) {
                a[j] = 0;
            }
        }
    }                이 형태는 에라토스테네스의 체를 구하는 코드로 잘 이해하고 외워두자.







































