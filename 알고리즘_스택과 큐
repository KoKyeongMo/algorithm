#10828
#내가 쓴 풀이

n = int(input())
stack =[]

for _ in range(n):
    order = list(input().split())
    if order[0] == 'push':
        stack.append(order[1])
        
    elif order[0] == 'pop':
        if len(stack) != 0:
            print(stack[-1])
            stack.remove(stack[-1])
        else:
            print(-1)
        
    elif order[0] == 'size':
        print(len(stack))
        
    elif order[0] == 'empty':
        if len(stack) == 0:
            print(1)
        else:
            print(0)
            
    elif order[0] == 'top':
        if len(stack) !=0:
            print(stack[-1])
        else:
            print(-1)

#해답
import sys
input = sys.stdin.readline


n = int(input())
stack =[]

for _ in range(n):
    order = list(input().split())
    if order[0] == 'push':
        stack.append(order[1])
        
    elif order[0] == 'pop':
        if stack:
            print(stack[-1])
            stack.pop()                   #스택을 다룰때는 remove함수보다 pop함수가 더 적절함(remove함수는 특정한 인덱스에 있는 값을 없애는것이 아닌 특정한 값을 없애는것이기에 중복되는 값이 있을경우 다 같이 없어질수있다.)
        else:                              
            print(-1)
        
    elif order[0] == 'size':
        print(len(stack))
        
    elif order[0] == 'empty':
        if not stack:
            print(1)
        else:
            print(0)
            
    elif order[0] == 'top':
        if stack:
            print(stack[-1])
        else:
            print(-1)


#시간 초과가 뜰때는 import sys
                  sys.stdin.readline 을 사용해보자



#10845
#내가 쓴 풀이(맞음)

import sys
input = sys.stdin.readline

n = int(input())
stack = []
for _ in range(n):

    order = list(input().split())
    if order[0] == 'push':
        stack.append(order[1])
        
    elif order[0] == 'pop':
        if stack:
            print(stack[0])
            stack.pop(0)
            
        else:
            print(-1)
            
    elif order[0] == 'size':
        print(len(stack))
        
    elif order[0] == 'empty':
        if not stack:
            print(1)
        else:
            print(0)

    elif order[0] == 'front':
        if stack:
            print(stack[0])
        else:
            print(-1)
            
    elif order [0] == 'back':
        if stack:
            print(stack[-1])
        else:
            print(-1)


1874번 스택으로 수열 만들기

해결책: 스택 자료형과 벡터 자료형을 이용해 push와 pop을 이용해서 스택을 만들면 된다.

#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#include <string>
#include <stack>

using namespace std;

int main() {
	int n, num = 1;
	cin >> n;
	vector<int> a(n);
	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}
	stack<int> st;
	vector<char> rs;
	
	for (int i = 0; i < n; i++) {
		int cur = a[i];
		if (cur >= num) {
			while (cur >= num) {
				st.push(num);
				num++;
				rs.push_back('+');
			}
			st.pop();
			rs.push_back('-');
		}
		else {
			int x = st.top();
			if (cur < x) {
				cout << "NO";
				return 0;
			}
			else {
				st.pop();
				rs.push_back('-');
			}
		}
	}
	for (int i=0;i<rs.size();i++){
		cout << rs[i] << '\n';
	}
}






        
