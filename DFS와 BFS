11724번 연결 요소의 개수

#include <iostream>
#include <string>
#include <vector>
#include <stack>
using namespace std;

int n, m, s, e;
vector<vector<int>> a;
vector<bool> v;

void dfs(int k) {
	v[k] = true;
	for (int i = 0; i < a[k].size(); i++) {
		int x = a[k][i];
		if (v[x] == false) {
			dfs(x);
		}
	}
}

int main(){
	cin >> n>> m;
	a.resize(n+1);
	v = vector<bool>(n + 1, false);
	for (int i = 0; i < m; i++) {
		cin >> s >> e;
		a[s].push_back(e);
		a[e].push_back(s);
	}
	int cnt = 0;
	for (int i = 1; i <= n; i++) {
		if (v[i] == false) {
			cnt++;
			dfs(i);
		}
	}
	cout << cnt;

}

새롭게 알게된 점: 
a.resize(n+1)라는 함수를 통해 a벡터를 n+1의 크기로 재정의 할수 있다.
bool 형인 벡터 v를 모두 false로 초기화 하려면 v = vector<bool>(n + 1, false); 로 쓸수 있다.


2023번 신기한 소수찾기

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>
#include <string>
using namespace std;

int n;

int isp(int num) {
    for (int i = 2; i < num / 2 + 1; i++) {
        if (num % i == 0) {
            return 0;
        }
    }
    return 1;
}

void dfs(int number) {
    if (to_string(number).size() == n) {
        cout << number<<'\n';
    }
    else {
        for (int i = 1; i < 10; i++) {
            if (i % 2 == 0) {
                continue;
            }
            if (isp(number * 10 + i)) {
                dfs(number*10+i);
            }
        }
    }
}


int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n;
    dfs(2);
    dfs(3);
    dfs(5);
    dfs(7);
}

새롭게 알게된 점:
1. int를 string으로 바꾸는 함수는 <string> 라이브러리의 to_string()함수를 쓰면 된다.
2. dfs 에서는 탐색을 재귀함수를 이용할수 있음을 인지하여야 한다.



2178번 미로 탐색

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;

int n, m, t[100][100] = { 0 }, a[100][100],x,y;
int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };
string s;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n >> m;

    for (int i = 0; i < n; i++) {
        cin >> s;
        for (int j = 0; j < m; j++) {
            a[i][j] = s[j] - '0';
        }
    }
    queue<pair<int, int>> q;
    t[0][0] = 1;
    q.push({ 0,0 });
    while (q.size()) {
        y = q.front().first;
        x = q.front().second;
        q.pop();
        for (int i = 0; i < 4; i++) {
            int ny = y + dy[i];
            int nx = x + dx[i];

            if (a[ny][nx] == 1 && t[ny][nx] == 0 && ny >= 0 && nx >= 0 && ny < n && nx < m) {
                t[ny][nx] = t[y][x] + 1;
                q.push({ ny,nx });
            }
        }
    }
    cout << t[n - 1][m - 1];
}
